# -*- coding: utf-8 -*-
"""Oops Ass 6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-2y6WAtSwqCI-7lGmLYsnU5LdjNzElCf
"""

## Question 1:Build a program to manage a university's course catalog. You want to define a base class Course
# that has the following properties: course_code: a string representing the course code (e.g., "CS101") course_name: a
# string representing the course name (e.g., "Introduction to Computer Science") credit_hours: an integer representing
# the credit hours for the course (e.g., 3) You also want to define two subclasses CoreCourse and ElectiveCourse, which
# inherit from the Course class. CoreCourse should have an additional property required_for_major which is a boolean
# representing whether the course is required for a particular major. ElectiveCourse should have an additional property
# elective_type which is a string representing the type of elective (e.g., "general", "technical", "liberal arts").

# Base class

class Course:
    def __init__(self, course_code, course_name, credit_hours):
        self.course_code = course_code
        self.course_name = course_name
        self.credit_hours = credit_hours

    def display_info(self):
        print(f"Course Code: {self.course_code}")
        print(f"Course Name: {self.course_name}")
        print(f"Credit Hours: {self.credit_hours}")

#Sub class for core classes

class CoreCourse(Course):
    def __init__(self, course_code, course_name, credit_hours, required_for_major):
        super().__init__(course_code, course_name, credit_hours)
        self.required_for_major = required_for_major

    def display_info(self):
        super().display_info()
        print(f"Required for Major: {self.required_for_major}")

# Subclass for elective courses

class ElectiveCourse(Course):
    def __init__(self, course_code, course_name, credit_hours, elective_type):
        super().__init__(course_code, course_name, credit_hours)
        self.elective_type = elective_type

    def display_info(self):
        super().display_info()
        print(f"Elective Type: {self.elective_type}")

# Example usage

core = CoreCourse("CS101", "Introduction to Computer Science", 3, True)
elective = ElectiveCourse("HIS201", "World History", 2, "liberal arts")

print("Core Course:")
core.display_info()
print("\nElective Course:")
elective.display_info()

"""# Question 2: Employee Module (Using a Custom Module)"""

# Question 2: Create a Python module named employee that contains a class Employee with attributes name,
# salary and methods get_name() and get_salary(). Write a program to use this module to create an object of the Employee
# class and display its name and salary.

class Employee:
    def __init__(self, name, salary):
        self.name = name
        self.salary = salary

    def get_name(self):
        return self.name

    def get_salary(self):
        return self.salary

employees = [
    Employee("Micheal Philips", 55000),
    Employee("Hussain Bolt", 65000),
    Employee("Dakota Johnson", 65000),
    Employee("Angelina Jolie", 67000)
]

for emp in employees:
    print("Employee Name:", emp.get_name())
    print("Employee Salary:", emp.get_salary())
    print()